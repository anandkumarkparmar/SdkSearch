buildscript {
  ext.buildConfig = [
      'compileSdk': 27,
      'minSdk': 24,
      'targetSdk': 27,

      'version': [
          'major': 1,
          'minor': 3,
          'patch': 0,
          'build': 1,
      ],
  ]
  ext.buildConfig.version['name'] = "${buildConfig.version.major}.${buildConfig.version.minor}.${buildConfig.version.patch}"
  ext.buildConfig.version['code'] = buildConfig.version.major * 1000000 + buildConfig.version.minor * 10000 + buildConfig.version.patch * 100 + buildConfig.version.build

  ext.versions = [
      'supportLibrary': '27.1.1',
      'atsl': '1.0.1',
      'kotlin': '1.2.41',
      'kotlinCoroutines': '0.22.5',
      'kotlinSerialization': '0.5.0',
      'okhttp': '3.10.0',
      'retrofit': '2.4.0',
      'kotshi': '1.0.4',
      'dagger': '2.16',
      'sqldelight': '1.0.0-alpha3',
  ]

  ext.deps = [
      'kotlin': [
          'stdlib': [
              'common': "org.jetbrains.kotlin:kotlin-stdlib-common:${versions.kotlin}",
              'jdk': "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
              'js': "org.jetbrains.kotlin:kotlin-stdlib-js:${versions.kotlin}",
          ],
          'test': [
              'common': "org.jetbrains.kotlin:kotlin-test-common:${versions.kotlin}",
              'annotations': "org.jetbrains.kotlin:kotlin-test-annotations-common:${versions.kotlin}",
              'jdk': "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}",
              'js': "org.jetbrains.kotlin:kotlin-test-js:${versions.kotlin}",
          ],
          'coroutines': [
              'common': "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${versions.kotlinCoroutines}",
              'jdk': "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}",
              'js': "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:${versions.kotlinCoroutines}",
              'android': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}",
              'rx2': "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:${versions.kotlinCoroutines}",
          ],
          'serialization': [
              'common': "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:${versions.kotlinSerialization}",
              'jdk': "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${versions.kotlinSerialization}",
              'js': "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:${versions.kotlinSerialization}",
          ],
      ],
      'android': [
          'arch': [
              'dbFramework': 'android.arch.persistence:db-framework:1.0.0',
          ],
          'support': [
              'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
              'coreUtils': "com.android.support:support-core-utils:${versions.supportLibrary}",
              'compat': "com.android.support:support-compat:${versions.supportLibrary}",
              'recyclerView': "com.android.support:recyclerview-v7:${versions.supportLibrary}",
              'customTabs': "com.android.support:customtabs:${versions.supportLibrary}",
              'appCompat': "com.android.support:appcompat-v7:${versions.supportLibrary}",
              'design': "com.android.support:design:${versions.supportLibrary}",
              'constraintLayout': 'com.android.support.constraint:constraint-layout:1.1.0',
          ],
          'x': [
              'coreKtx': 'androidx.core:core-ktx:0.3',
          ],
          'test': [
              'runner': "com.android.support.test:runner:${versions.atsl}",
              'rules': "com.android.support.test:rules${versions.atsl}",
          ],
      ],
      'okhttp': [
          'client': "com.squareup.okhttp3:okhttp:${versions.okhttp}",
          'logging': "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}",
          'mockWebServer': "com.squareup.okhttp3:mockwebserver:${versions.okhttp}",
      ],
      'retrofit': [
          'client': "com.squareup.retrofit2:retrofit:${versions.retrofit}",
          'adapterKotlinCoroutines': 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:1.0.0',
          'converterKotlinxSerialization': 'com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.0.1',
          'converterMoshi': "com.squareup.retrofit2:converter-moshi:${versions.retrofit}",
      ],
      'kotshi': [
          'api': "se.ansman.kotshi:api:${versions.kotshi}",
          'compiler': "se.ansman.kotshi:compiler:${versions.kotshi}",
      ],
      'dagger': [
          'runtime': "com.google.dagger:dagger:${versions.dagger}",
          'compiler': "com.google.dagger:dagger-compiler:${versions.dagger}",
          'androidRuntime': "com.google.dagger:dagger-android:${versions.dagger}",
          'androidCompiler': "com.google.dagger:dagger-android-processor:${versions.dagger}",
      ],
      'okio': 'com.squareup.okio:okio:1.14.0',
      'moshi': 'com.squareup.moshi:moshi:1.5.0',
      'timber': 'com.jakewharton.timber:timber:4.7.0',
      'junit': 'junit:junit:4.12',
      'truth': 'com.google.truth:truth:0.40',
      'bugsnag': 'com.bugsnag:bugsnag-android:4.2.2',
      'argparser': 'com.xenomachina:kotlin-argparser:2.0.5',
      'byteunits': 'com.jakewharton.byteunits:byteunits:0.9.1',
      'sqldelight': [
          'android': "com.squareup.sqldelight:android-driver:${versions.sqldelight}",
          'runtime': [
              'common': "com.squareup.sqldelight:runtime-common:${versions.sqldelight}",
              'jdk': "com.squareup.sqldelight:runtime-jdk:${versions.sqldelight}",
              'js': "com.squareup.sqldelight:runtime-js:${versions.sqldelight}",
          ],
      ],
  ]

  ext.isCiBuild = System.getenv('CI') == 'true'

  repositories {
    mavenCentral()
    google()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    gradlePluginPortal()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.2.0-alpha16'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    classpath "org.jetbrains.kotlinx:kotlinx-gradle-serialization-plugin:${versions.kotlinSerialization}"
    classpath "com.squareup.sqldelight:gradle-plugin:${versions.sqldelight}"
    classpath 'com.eriwen:gradle-js-plugin:1.12.1'
    classpath 'com.github.triplet.gradle:play-publisher:1.2.2'
    classpath 'gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:3.2.0'
  }
}

apply plugin: 'org.jlleitschuh.gradle.ktlint'

allprojects {
  repositories {
    mavenCentral()
    google()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    jcenter()
  }

  // Force all of the primary support libraries to use the same version.
  configurations.all {
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'com.android.support') {
          details.useVersion versions.supportLibrary
        }
      }
    }
  }

  tasks.withType(Test) {
    testLogging {
      events "skipped", "failed", "passed"
    }
  }
  // TODO same thing for instrumentation tests: https://issuetracker.google.com/issues/37056080
  //tasks.withType(AndroidTestTask) {
  //  testLogging {
  //    events "skipped", "failed", "passed"
  //  }
  //}
}

def gitSha() {
  def f = new File(buildDir, "commit-sha.txt")
  if (!f.exists()) {
    def p = 'git rev-parse HEAD'.execute([], project.rootDir)
    if (p.waitFor() != 0) {
      throw new RuntimeException(p.errorStream.text)
    }
    f.parentFile.mkdirs()
    f.text = p.text.trim()
  }
  return f.text.trim()
}

def gitTimestamp() {
  def f = new File(buildDir, "commit-timestamp.txt")
  if (!f.exists()) {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    if (p.waitFor() != 0) {
      throw new RuntimeException(p.errorStream.text)
    }
    f.parentFile.mkdirs()
    f.text = p.text.trim()
  }
  return f.text.trim()
}

def propOrEmpty(String name) {
  return hasProperty(name) ? getProperty(name) : ''
}

apply from: file('gradle/projectDependencyGraph.gradle')
